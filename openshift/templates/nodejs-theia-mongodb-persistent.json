apiVersion: v1
kind: Template
labels:
  template: nodejs-theia-mongo-persistent
message: 'The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.


  For more information about using this template see https://github.com/devcomb/nodejs-ex/blob/master/README.md.'
metadata:
  annotations:
    description: An example Node.js application with a MongoDB database and Theia
      IDE.  https://github.com/devcomb/nodejs-ex/blob/master/README.md.
    iconClass: icon-nodejs
    openshift.io/display-name: 'Node.js + Theia + MongoDB '
    openshift.io/documentation-url: https://github.com/devcomb/nodejs-ex
    openshift.io/long-description: This template defines resources needed to develop
      a NodeJS application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: ''
    openshift.io/support-url: ''
    tags: quickstart,nodejs,theia
    template.openshift.io/bindable: 'false'
  name: nodejs-theia-mongo-persistent
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}proxy
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: proxy-tls
  spec:
    ports:
    - name: ${NAME}proxy
      port: 443
      targetPort: 8443
    selector:
      name: ${NAME}proxy
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    name: ${NAME}example
  spec:
    ports:
    - name: theia
      port: ${{THEIA_PORT}}
      targetPort: ${{THEIA_PORT}}
    - name: web
      port: ${{SEC_PORT}}
      targetPort: ${{SEC_PORT}}
    selector:
      name: ${NAME}example
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}proxy
  spec:
    port:
      targetPort: ${NAME}proxy
    tls:
      termination: Reencrypt
    to:
      kind: Service
      name: ${NAME}proxy
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}example
  spec:
    host: ${APPLICATION_DOMAIN}
    name: web
    port:
      targetPort: web
    to:
      kind: Service
      name: ${NAME}example
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}example
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}example
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}example:latest
    postCommit:
      script: npm test
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
          value: ${NPM_MIRROR}
        from:
          kind: DockerImage
          name: docker.io/devcomb/theia-openshift:latest
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}example
  spec:
    replicas: 1
    selector:
      name: ${NAME}example
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}example
        name: ${NAME}example
      spec:
        containers:
        - name: nodejs-theia-example
          env:
          - name: SEC_PROC
            value: "${SEC_PROC}"
          - name: DEV_MODE
            value: "${DEV_MODE}"
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${NAME}
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: ${{SEC_PORT}}
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
          - containerPort: ${{SEC_PORT}}
          readinessProbe:
            httpGet:
              path: /
              port: ${{SEC_PORT}}
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
        volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-theia-example
        from:
          kind: ImageStreamTag
          name: ${NAME}example:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}proxy
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${NAME}proxy"}}'

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}proxy
  spec:
    replicas: 1
    selector:
      name: ${NAME}proxy
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}proxy
        name: ${NAME}proxy
      spec:
        serviceAccount: ${NAME}proxy
        serviceAccountName: ${NAME}proxy
        containers:
        - name: oauth-proxy
          image: docker.io/openshift/oauth-proxy:latest
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8443
            name: public
            protocol: TCP
          args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-service-account=${NAME}proxy
          - --upstream=http://${NAME}example:3000
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          volumeMounts:
          - mountPath: /etc/tls/private
            name: proxy-tls
        volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${NAME}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_MONGODB_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange


parameters:
- description: Run Node.js Application.
  displayName: Secondary Application
  name: SEC_PROC
  value: 'true'
  required: true
- description: Node.js Application IDE port.
  displayName: Secondary Application Port
  name: SEC_PORT
  value: '8080'
  required: true
- description: Run Theia IDE.
  displayName: IDE Application
  name: DEV_MODE
  value: 'true'
  required: true
- description: Theia IDE port.
  displayName: IDE Application Port
  name: THEIA_PORT
  value: '3000'
  required: true
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: nodejs-theia-mongo
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of MongoDB image to be used (3.2, 3.4, or latest).
  displayName: Version of MongoDB Image
  name: MONGODB_VERSION
  required: true
  value: '3.4'
- description: Maximum amount of memory the Node.js container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/devcomb/nodejs-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DATABASE_USER
- description: Password for the MongoDB user.
  displayName: MongoDB Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: sampledb
- description: Password for the database admin user.
  displayName: Database Administrator Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: The custom NPM mirror URL
  displayName: Custom NPM Mirror URL
  name: NPM_MIRROR
  value: ''
