apiVersion: v1
kind: Template
labels:
  app: nodejs-theia-example
  template: nodejs-theia-example
message: 'The following service(s) have been created in your project: ${NAME}example.


  For more information about using this template see https://github.com/devcomb/nodejs-ex/blob/master/README.md.'
metadata:
  annotations:
    description: An example Node.js application with Theia IDE but no database. For
      more information about using this template, including OpenShift considerations,
      see https://github.com/devcomb/nodejs-ex/blob/master/README.md.
    iconClass: icon-nodejs
    openshift.io/display-name: Node.js + Theia IDE
    openshift.io/documentation-url: https://github.com/devcomb/nodejs-ex
    openshift.io/long-description: This template defines resources needed to develop
      a NodeJS application with Theia IDE, including a build configuration and application
      deployment configuration.  It does not include a database.
    openshift.io/provider-display-name: ''
    openshift.io/support-url: ''
    tags: quickstart,nodejs,theia
    template.openshift.io/bindable: 'false'
  name: nodejs-theia
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}proxy
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: proxy-tls
  spec:
    ports:
    - name: ${NAME}proxy
      port: 443
      targetPort: 8443
    selector:
      name: ${NAME}proxy
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    name: ${NAME}example
  spec:
    ports:
    - name: theia
      port: ${{THEIA_PORT}}
      targetPort: ${{THEIA_PORT}}
    - name: web
      port: ${{SEC_PORT}}
      targetPort: ${{SEC_PORT}}
    selector:
      name: ${NAME}example
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}proxy
  spec:
    port:
      targetPort: ${NAME}proxy
    tls:
      termination: Reencrypt
    to:
      kind: Service
      name: ${NAME}proxy
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}example
  spec:
    host: ${APPLICATION_DOMAIN}
    name: web
    port:
      targetPort: web
    to:
      kind: Service
      name: ${NAME}example
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}example
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}example
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}example:latest
    postCommit:
      script: npm test
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
          value: ${NPM_MIRROR}
        from:
          kind: DockerImage
          name: docker.io/devcomb/theia-openshift:latest
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}example
  spec:
    replicas: 1
    selector:
      name: ${NAME}example
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}example
        name: ${NAME}example
      spec:
        containers:
        - name: nodejs-theia-example
          env:
          - name: SEC_PROC
            value: "${SEC_PROC}"
          - name: DEV_MODE
            value: "${DEV_MODE}"
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: ${{SEC_PORT}}
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
          - containerPort: ${{SEC_PORT}}
          readinessProbe:
            httpGet:
              path: /
              port: ${{SEC_PORT}}
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
        volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-theia-example
        from:
          kind: ImageStreamTag
          name: ${NAME}example:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}proxy
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${NAME}proxy"}}'

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}proxy
  spec:
    replicas: 1
    selector:
      name: ${NAME}proxy
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}proxy
        name: ${NAME}proxy
      spec:
        serviceAccount: ${NAME}proxy
        serviceAccountName: ${NAME}proxy
        containers:
        - name: oauth-proxy
          image: docker.io/openshift/oauth-proxy:latest
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8443
            name: public
            protocol: TCP
          args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-service-account=${NAME}proxy
          - --upstream=http://nodejs-theia-example:3000
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          volumeMounts:
          - mountPath: /etc/tls/private
            name: proxy-tls
        volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
    triggers:
    - type: ConfigChange

parameters:
  - description: Run Node.js Application.
    displayName: Secondary Application
    name: SEC_PROC
    value: 'true'
    required: true
  - description: Node.js Application IDE port.
    displayName: Secondary Application Port
    name: SEC_PORT
    value: '8080'
    required: true
  - description: Run Theia IDE.
    displayName: IDE Application
    name: DEV_MODE
    value: 'true'
    required: true
  - description: Theia IDE port.
    displayName: IDE Application Port
    name: THEIA_PORT
    value: '3000'
    required: true
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: nodejs-theia-
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/openshift/nodejs-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you
      are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root
      of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Node.js service, if left
      blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
    value: ''
  - description: Github trigger secret.  A difficult to guess string encoded as part
      of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
  - description: The custom NPM mirror URL
    displayName: Custom NPM Mirror URL
    name: NPM_MIRROR
    value: ''
- description: Secondary Application Run Command
    displayName: Secondary Application Run Command
    name: SEC_COMMAND
    value: 'exec npm run -d start'
- description: Secondary Application Debug Command
    displayName: Secondary Application Debug Command
    name: SEC_DEBUG_COMMAND
    value: 'exec nodemon --inspect=5858'
